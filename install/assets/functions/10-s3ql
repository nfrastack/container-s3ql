#!/command/with-contenv bash

bootstrap_filesystem() {
    if var_true "${ENABLE_CACHE}" ; then
        if [ ! -d "${CACHE_PATH}" ]; then
            mkdir -p "${CACHE_PATH}"
        fi
        if [ $(stat -c %U "${CACHE_PATH}") != "root" ] ; then chown root:root "${CACHE_PATH}" ; fi
    fi

    if [ ! -d "${CONFIG_PATH}" ]; then
        mkdir -p "${CONFIG_PATH}"
    fi
    if [ $(stat -c %U "${CONFIG_PATH}") != "root" ] ; then chown -R root:root "${CONFIG_PATH}" ; fi
    if [ ! -d "/root/.s3ql" ] ; then
        ln -sf "${CONFIG_PATH}" /root/.s3ql
    fi

    if [ ! -d "${DATA_PATH}" ]; then
        mkdir -p "${DATA_PATH}"
    fi
    if [ $(stat -c %U "${DATA_PATH}") != "root" ] ; then chown root:root "${DATA_PATH}" ; fi

    if [ ! -d "${LOG_PATH}" ]; then
        mkdir -p "${LOG_PATH}"
    fi
    if [ $(stat -c %U "${LOG_PATH}") != "root" ] ; then chown -R root:root "${LOG_PATH}" ; fi

    case "${LOG_TYPE,,}" in
        file )
            create_logrotate root "${LOG_PATH}"/*.log root root
        ;;
    esac
}

setup_s3ql() {
    if [ "${SETUP_MODE,,}" = "auto" ] ; then
        sanity_var S3_HOST "S3 Storage URL"
        sanity_var S3_KEY_ID "S3 Key ID"
        sanity_var S3_KEY_SECRET "S3 Key Secret"

        if [ -n "${S3QL_PASS}" ]; then
            s3ql_filesystem_encryption="fs-passphrase: ${S3QL_PASS}"
        fi
        cat << EOF > "${CONFIG_PATH}"/"${CONFIG_FILE}"
## Auto Generated S3QL Configuration - Do not edit, instead set ENV Vars
## If you do want to edit this file and add your own custom, set the environment variable 'SETUP_TYPE=MANUAL' for next restart of container.
## Last Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

[s3ql]
storage-url: ${S3_HOST}
backend-login: ${S3_KEY_ID}
backend-password: ${S3_KEY_SECRET}
${s3ql_filesystem_encryption}
EOF

        chmod 700 "${CONFIG_PATH}"/"${CONFIG_FILE}"

        if var_true "${ENABLE_CACHE}" ; then
            s3ql_cachedir_arg="--cachedir ${CACHE_PATH}"
            if var_true "${ENABLE_PERSISTENT_CACHE}" ; then
                s3ql_cache_peresistent_arg="--keep-cache"
            fi
        fi

        if [ "${LOG_TYPE,,}" = "file" ] ; then
            exec_arg=silent
            log_fsck="${LOG_PATH}"/$(date +'%Y%m%d%H%M%S')-fsck_$(echo "${S3_HOST}" | cut -d / -f 4).log
            log_mkfs="${LOG_PATH}"/$(date +'%Y%m%d%H%M%S')-mkfs_$(echo "${S3_HOST}" | cut -d / -f 4).log
        else
            log_fsck=none
            log_mkfs=none
        fi

        print_debug "Performing File System Check on Initialization"
        ${exec_arg} fsck.s3ql \
                --batch \
                --log ${log_fsck} \
                --authfile "${CONFIG_PATH}"/"${CONFIG_FILE}" \
                --compress "${COMPRESSION}" \
                ${s3ql_cachedir_arg} ${s3ql_cache_persistent_arg} "${S3_HOST}" ${FSCK_ARGS}
        fsck_ec=$?

        if [ ${fsck_ec} -eq 18 ]; then
            if [ -n "${S3QL_PASS}" ]; then
                print_notice "Creating new encrypted S3QL Filesystem on '${S3_HOST}'"
                backup_key=backup_$(echo "${S3_HOST}" | cut -d / -f 4).key
                echo "${S3QL_PASS}" | mkfs.s3ql \
                                            --log "${log_mkfs}" \
                                            --authfile "${CONFIG_PATH}"/"${CONFIG_FILE}" \
                                            ${s3ql_cachedir_arg} ${MKFS_ARGS} "${S3_HOST}" | ${exec_arg} tee "${CONFIG_PATH}"/${backup_key}
                print_notice "A backup key has been saved to '${CONFIG_PATH}/${backup_key}'. Please keep in a safe location if you ever lose your encryption key!"
            else
                print_notice "Creating new unencrypted S3QL Filesystem on '${S3_HOST}'"
                ${exec_arg} mkfs.s3ql \
                            --log "${log_mkfs}" \
                            --authfile "${CONFIG_PATH}"/"${CONFIG_FILE}" \
                            --plain \
                            ${s3ql_cachedir_arg} ${MKFS_ARGS} "${S3_HOST}"
            fi
        elif [ "${fsck_ec}" -ne 0 ]; then
            print_error "Detected problems with the file system with exit code '${fsck_ec}'. Halting.."
            print_error "Head inside the container and perform any commands before restarting the container again.."
            exit "${fsck_ec}"
        fi
    else
        print_notice "S3QL Manual Mode Activated"
    fi

    if [ "${MODE,,}" != "normal" ] ; then
        print_notice "Not starting S3QL leaving container to be used for maintenance purposes"
        service_stop "$(basename "$0")"
    fi
}
